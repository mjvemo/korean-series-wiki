/* Core */
import { createSlice } from "@reduxjs/toolkit";
import { initialState } from "./state";
import {
  getNewsAsync,
  getNewsByIdAsync,
  createNewsAsync,
  getNewsBySerieIdAsync,
  deleteNewsByIdAsync,
  getNewsByActorIdAsync,
} from "./thunks";
import {
  getNewsFulfilledCaseReducer,
  getNewsPendingCaseReducer,
  getNewsByIdFulfilledCaseReducer,
  getNewsByIdPendingCaseReducer,
  getNewsByIdRejectedCaseReducer,
  addNewsReducer,
  createNewsPendingCaseReducer,
  createNewsFulfilledCaseReducer,
  createNewsRejectedCaseReducer,
  getNewsBySerieIdPendingCaseReducer,
  getNewsBySerieIdRejectedCaseReducer,
  getNewsBySerieIdFullfieldCaseReducer,
  deleteNewsByIdPendingCaseReducer,
  deleteNewsByIdFullfieldCaseReducer,
  deleteNewsByIdRejectedCaseReducer,
  getNewsByActorIdPendingCaseReducer,
  getNewsByActorIdRejectedCaseReducer,
  getNewsByActorIdFulfilledCaseReducer,
} from "./reducers";

export const newsSlice = createSlice({
  name: "news",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addNews: addNewsReducer,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // GetNews
      .addCase(getNewsAsync.pending, getNewsPendingCaseReducer)
      .addCase(getNewsAsync.fulfilled, getNewsFulfilledCaseReducer)
      // GetNewsById
      .addCase(getNewsByIdAsync.pending, getNewsByIdPendingCaseReducer)
      .addCase(getNewsByIdAsync.fulfilled, getNewsByIdFulfilledCaseReducer)
      .addCase(getNewsByIdAsync.rejected, getNewsByIdRejectedCaseReducer)

      // CreateNews

      .addCase(createNewsAsync.pending, createNewsPendingCaseReducer)
      .addCase(createNewsAsync.fulfilled, createNewsFulfilledCaseReducer)
      .addCase(createNewsAsync.rejected, createNewsRejectedCaseReducer)

      // // GetNewsByNewsId
      // .addCase(getNewsByNewsIdAsync.pending, getNewsByNewsIdPendingCaseReducer)
      // .addCase(
      //   getNewsByNewsIdAsync.fulfilled,
      //   getNewsByNewsIdFulfilledCaseReducer
      // )
      // .addCase(
      //   getNewsByNewsIdAsync.rejected,
      //   getNewsByNewsIdRejectedCaseReducer
      // )

      //GetNewsBySerieId
      .addCase(
        getNewsBySerieIdAsync.pending,
        getNewsBySerieIdPendingCaseReducer
      )
      .addCase(
        getNewsBySerieIdAsync.fulfilled,
        getNewsBySerieIdFullfieldCaseReducer
      )
      .addCase(
        getNewsBySerieIdAsync.rejected,
        getNewsBySerieIdRejectedCaseReducer
      )

      //GetNewsByActorId
      .addCase(
        getNewsByActorIdAsync.pending,
        getNewsByActorIdPendingCaseReducer
      )
      .addCase(
        getNewsByActorIdAsync.fulfilled,
        getNewsByActorIdFulfilledCaseReducer
      )
      .addCase(
        getNewsByActorIdAsync.rejected,
        getNewsByActorIdRejectedCaseReducer
      )

      //DeleteNewsById
      .addCase(deleteNewsByIdAsync.pending, deleteNewsByIdPendingCaseReducer)
      .addCase(
        deleteNewsByIdAsync.fulfilled,
        deleteNewsByIdFullfieldCaseReducer
      )
      .addCase(deleteNewsByIdAsync.rejected, deleteNewsByIdRejectedCaseReducer);
  },
});
