/* Core */
import { createSlice } from "@reduxjs/toolkit";
import { initialState } from "./state";
import {
  createAwardAsync,
  getAwardsAsync,
  getAwardByIdAsync,
  getAwardsBySerieIdAsync,
  deleteAwardByIdAsync,
  getAwardsByActorIdAsync,
} from "./thunks";
import {
  getAwardsFulfilledCaseReducer,
  getAwardsPendingCaseReducer,
  getAwardsRejectedCaseReducer,
  getAwardsByIdFulfilledCaseReducer,
  getAwardsByIdPendingCaseReducer,
  getAwardsByIdRejectedCaseReducer,
  addAwardReducer,
  createAwardPendingCaseReducer,
  createAwardFulfilledCaseReducer,
  createAwardRejectedCaseReducer,
  getAwardsBySerieIdPendingCaseReducer,
  getAwardsBySerieIdFullfieldCaseReducer,
  getAwardsBySerieIdRejectedCaseReducer,
  deleteAwardsByIdRejectedCaseReducer,
  deleteAwardByIdPendingCaseReducer,
  deleteAwardByIdFullfieldCaseReducer,
  getAwardsByActorIdPendingCaseReducer,
  getAwardsByActorIdFullfieldCaseReducer,
  getAwardsByActorIdRejectedCaseReducer,
} from "./reducers";

export const awardsSlice = createSlice({
  name: "awards",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addAward: addAwardReducer,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // GetAwards
      .addCase(getAwardsAsync.pending, getAwardsPendingCaseReducer)
      .addCase(getAwardsAsync.fulfilled, getAwardsFulfilledCaseReducer)
      .addCase(getAwardsAsync.rejected, getAwardsRejectedCaseReducer)

      // GetAwardById
      .addCase(getAwardByIdAsync.pending, getAwardsByIdPendingCaseReducer)
      .addCase(getAwardByIdAsync.fulfilled, getAwardsByIdFulfilledCaseReducer)
      .addCase(getAwardByIdAsync.rejected, getAwardsByIdRejectedCaseReducer)

      // CreateAward
      .addCase(createAwardAsync.pending, createAwardPendingCaseReducer)
      .addCase(createAwardAsync.fulfilled, createAwardFulfilledCaseReducer)
      .addCase(createAwardAsync.rejected, createAwardRejectedCaseReducer)

      // GetAwardByActorId
      .addCase(
        getAwardsByActorIdAsync.pending,
        getAwardsByActorIdPendingCaseReducer
      )
      .addCase(
        getAwardsByActorIdAsync.fulfilled,
        getAwardsByActorIdFullfieldCaseReducer
      )
      .addCase(
        getAwardsByActorIdAsync.rejected,
        getAwardsByActorIdRejectedCaseReducer
      )

      // GetAwardBySerieId
      .addCase(
        getAwardsBySerieIdAsync.pending,
        getAwardsBySerieIdPendingCaseReducer
      )
      .addCase(
        getAwardsBySerieIdAsync.fulfilled,
        getAwardsBySerieIdFullfieldCaseReducer
      )
      .addCase(
        getAwardsBySerieIdAsync.rejected,
        getAwardsBySerieIdRejectedCaseReducer
      )

      //DeleteAwardById
      .addCase(deleteAwardByIdAsync.pending, deleteAwardByIdPendingCaseReducer)
      .addCase(
        deleteAwardByIdAsync.fulfilled,
        deleteAwardByIdFullfieldCaseReducer
      )
      .addCase(
        deleteAwardByIdAsync.rejected,
        deleteAwardsByIdRejectedCaseReducer
      );
  },
});
